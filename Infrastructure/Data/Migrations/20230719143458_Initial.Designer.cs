// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(AplicationDbContext))]
    [Migration("20230719143458_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Core.Entities.AreaCampus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("longtext");

                    b.Property<string>("NombreArea")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("Core.Entities.CategoriaIncidencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("Core.Entities.EmailsTrainers", b =>
                {
                    b.Property<int>("IdTipoEmail")
                        .HasColumnType("int");

                    b.Property<int>("IdTrainer")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.HasKey("IdTipoEmail", "IdTrainer");

                    b.HasIndex("IdTrainer");

                    b.ToTable("EmailsTrainer");
                });

            modelBuilder.Entity("Core.Entities.Hardware", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("IdCategoria")
                        .HasColumnType("int");

                    b.Property<int>("IdPuesto")
                        .HasColumnType("int");

                    b.Property<int>("TipoHardwareId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdCategoria");

                    b.HasIndex("IdPuesto");

                    b.HasIndex("TipoHardwareId");

                    b.ToTable("Hardwares");
                });

            modelBuilder.Entity("Core.Entities.Incidencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CategoriaIncidenciaId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("FechaReporte")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdCategoria")
                        .HasColumnType("int");

                    b.Property<int>("IdPuesto")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoIncidencia")
                        .HasColumnType("int");

                    b.Property<int>("IdTrainer")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaIncidenciaId");

                    b.HasIndex("IdCategoria");

                    b.HasIndex("IdPuesto");

                    b.HasIndex("IdTipoIncidencia");

                    b.HasIndex("IdTrainer");

                    b.ToTable("Incidencias");
                });

            modelBuilder.Entity("Core.Entities.Puesto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdSalon")
                        .HasColumnType("int");

                    b.Property<string>("NombrePuesto")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("IdSalon");

                    b.ToTable("Puestos");
                });

            modelBuilder.Entity("Core.Entities.Salon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdArea")
                        .HasColumnType("int");

                    b.Property<string>("NombreSalon")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Numero_Puestos")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdArea");

                    b.ToTable("Salones");
                });

            modelBuilder.Entity("Core.Entities.Software", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("IdCategoria")
                        .HasColumnType("int");

                    b.Property<int>("IdPuesto")
                        .HasColumnType("int");

                    b.Property<int>("TipoSofwareId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdCategoria");

                    b.HasIndex("IdPuesto");

                    b.HasIndex("TipoSofwareId");

                    b.ToTable("Softwares");
                });

            modelBuilder.Entity("Core.Entities.TelefonosTrainers", b =>
                {
                    b.Property<int>("IdTipoTelefono")
                        .HasColumnType("int");

                    b.Property<int>("IdTrainer")
                        .HasColumnType("int");

                    b.Property<string>("NumeroTelefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("IdTipoTelefono", "IdTrainer");

                    b.HasIndex("IdTrainer");

                    b.ToTable("TelefonosTrainer");
                });

            modelBuilder.Entity("Core.Entities.TipoHardware", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NombreHardware")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("TiposHardware");
                });

            modelBuilder.Entity("Core.Entities.TipoIncidencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NivelIncidencia")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("TiposIncidencia");
                });

            modelBuilder.Entity("Core.Entities.TipoSoftware", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NombreSoftware")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("TiposSoftware");
                });

            modelBuilder.Entity("Core.Entities.TiposEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("TiposEmail");
                });

            modelBuilder.Entity("Core.Entities.TiposTelefono", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("TiposTelefono");
                });

            modelBuilder.Entity("Core.Entities.Trainer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Trainers");
                });

            modelBuilder.Entity("Core.Entities.EmailsTrainers", b =>
                {
                    b.HasOne("Core.Entities.TiposEmail", "TipoEmail")
                        .WithMany("Emails")
                        .HasForeignKey("IdTipoEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Trainer", "Trainer")
                        .WithMany("EmailsTrainer")
                        .HasForeignKey("IdTrainer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoEmail");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Core.Entities.Hardware", b =>
                {
                    b.HasOne("Core.Entities.CategoriaIncidencia", "Categoria")
                        .WithMany()
                        .HasForeignKey("IdCategoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Puesto", "Puesto")
                        .WithMany("Hardwars")
                        .HasForeignKey("IdPuesto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.TipoHardware", "TipoHardware")
                        .WithMany("Hardwares")
                        .HasForeignKey("TipoHardwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Puesto");

                    b.Navigation("TipoHardware");
                });

            modelBuilder.Entity("Core.Entities.Incidencia", b =>
                {
                    b.HasOne("Core.Entities.CategoriaIncidencia", null)
                        .WithMany("Incidencias")
                        .HasForeignKey("CategoriaIncidenciaId");

                    b.HasOne("Core.Entities.CategoriaIncidencia", "CategoriaIncidencia")
                        .WithMany()
                        .HasForeignKey("IdCategoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Puesto", "Puesto")
                        .WithMany("Incidencias")
                        .HasForeignKey("IdPuesto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.TipoIncidencia", "TipoIncidencia")
                        .WithMany("Incidencias")
                        .HasForeignKey("IdTipoIncidencia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Trainer", "Trainer")
                        .WithMany("Incidencias")
                        .HasForeignKey("IdTrainer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoriaIncidencia");

                    b.Navigation("Puesto");

                    b.Navigation("TipoIncidencia");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Core.Entities.Puesto", b =>
                {
                    b.HasOne("Core.Entities.Salon", "Salon")
                        .WithMany("Puestos")
                        .HasForeignKey("IdSalon")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("Core.Entities.Salon", b =>
                {
                    b.HasOne("Core.Entities.AreaCampus", "Area")
                        .WithMany("Salones")
                        .HasForeignKey("IdArea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("Core.Entities.Software", b =>
                {
                    b.HasOne("Core.Entities.CategoriaIncidencia", "Categoria")
                        .WithMany()
                        .HasForeignKey("IdCategoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Puesto", "Puesto")
                        .WithMany("Softwars")
                        .HasForeignKey("IdPuesto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.TipoSoftware", "TipoSoftware")
                        .WithMany("Softwares")
                        .HasForeignKey("TipoSofwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Puesto");

                    b.Navigation("TipoSoftware");
                });

            modelBuilder.Entity("Core.Entities.TelefonosTrainers", b =>
                {
                    b.HasOne("Core.Entities.TiposTelefono", "TipoTelefono")
                        .WithMany("Telefonos")
                        .HasForeignKey("IdTipoTelefono")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Trainer", "Trainer")
                        .WithMany("TelefonosTrainer")
                        .HasForeignKey("IdTrainer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoTelefono");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Core.Entities.AreaCampus", b =>
                {
                    b.Navigation("Salones");
                });

            modelBuilder.Entity("Core.Entities.CategoriaIncidencia", b =>
                {
                    b.Navigation("Incidencias");
                });

            modelBuilder.Entity("Core.Entities.Puesto", b =>
                {
                    b.Navigation("Hardwars");

                    b.Navigation("Incidencias");

                    b.Navigation("Softwars");
                });

            modelBuilder.Entity("Core.Entities.Salon", b =>
                {
                    b.Navigation("Puestos");
                });

            modelBuilder.Entity("Core.Entities.TipoHardware", b =>
                {
                    b.Navigation("Hardwares");
                });

            modelBuilder.Entity("Core.Entities.TipoIncidencia", b =>
                {
                    b.Navigation("Incidencias");
                });

            modelBuilder.Entity("Core.Entities.TipoSoftware", b =>
                {
                    b.Navigation("Softwares");
                });

            modelBuilder.Entity("Core.Entities.TiposEmail", b =>
                {
                    b.Navigation("Emails");
                });

            modelBuilder.Entity("Core.Entities.TiposTelefono", b =>
                {
                    b.Navigation("Telefonos");
                });

            modelBuilder.Entity("Core.Entities.Trainer", b =>
                {
                    b.Navigation("EmailsTrainer");

                    b.Navigation("Incidencias");

                    b.Navigation("TelefonosTrainer");
                });
#pragma warning restore 612, 618
        }
    }
}
